using AnyLayout.RawInput;
using System;
using System.Linq;

namespace RgbFusionControl
{
	class Program
	{
		static void Main(string[] args)
		{
			var rgbFusionDevice1 = HidDevice.FromPath(@"\\?\HID#VID_048D&PID_5702&Col01#6&b086894&0&0000#{4d1e55b2-f16f-11cf-88cb-001111000030}");
			var rgbFusionDevice2 = HidDevice.FromPath(@"\\?\HID#VID_048D&PID_5702&Col02#6&b086894&0&0001#{4d1e55b2-f16f-11cf-88cb-001111000030}");

			var zero = new byte[64];

			zero[0] = 0xCC;

			//for (int i = 0; i < 8; i++)
			//{
			//	zero[1] = (byte)(0x20 | i);
			//	rgbFusionDevice.SendFeatureReport(zero);
			//}

			zero[1] = 0x28;
			zero[2] = 0xFF;

			rgbFusionDevice2.SendFeatureReport(zero);

			// Set a color:
			// 0xcc, LED, LED, 0[8], 1, Intensity, 0, Blue, Green, Red, 0[N]

			// Cycle colors
			// 0xcc, LED, LED, 8*0, 4, Intensity, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0x52, Color Duration (64 = ~15s), Transition Speed 1, Transition Speed 2 ?

			var data0 = new byte[] {
				0xcc, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x00, 0xff, 0xff,
				0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			};

			var data1 = new byte[] {
				0xcc, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x64, 0x00, 0x00, 0x00,
				0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x03, 0xee, 0x02, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			};

			var data2 = new byte[] {
				0xcc, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x5a, 0x00, 0xfe, 0xff,
				0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			};

			data1 = ParseHexString("cc200100000000000000000464000000ff00000000007805b0046400000107000000000000000000000000000000000000000000000000000000000000000000");

			for (int i = 0; i < 5; i++)
			{
				data1[1] = (byte)(0x20 | i);
				data1[2] = (byte)(1 << i);
				rgbFusionDevice2.SendFeatureReport(data1);
			}

			for (int i = 5; i < 7; i++)
			{
				data2[1] = (byte)(0x20 | i);
				data2[2] = (byte)(1 << i);
				rgbFusionDevice2.SendFeatureReport(data2);
			}

			rgbFusionDevice2.SendFeatureReport(zero);

			//rgbFusionDevice.SendFeatureReport(new byte[] {
			//	0xcc, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x64, 0x00, 0x00, 0x00,
			//	0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x03, 0xee, 0x02, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00,
			//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			//});

			//rgbFusionDevice.SendFeatureReport(new byte[] {
			//	0xcc, 0x21, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x64, 0x00, 0x00, 0x00,
			//	0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x03, 0xee, 0x02, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00,
			//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			//});

			//rgbFusionDevice.SendFeatureReport(new byte[] {
			//	0xcc, 0x22, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x64, 0x00, 0x00, 0x00,
			//	0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x03, 0xee, 0x02, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00,
			//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			//});

			//rgbFusionDevice.SendFeatureReport(new byte[] {
			//	0xcc, 0x23, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x64, 0x00, 0x00, 0x00,
			//	0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x03, 0xee, 0x02, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00,
			//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			//});

			//rgbFusionDevice.SendFeatureReport(new byte[] {
			//	0xcc, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x64, 0x00, 0x00, 0x00,
			//	0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x03, 0xee, 0x02, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00,
			//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			//});
		}

		private static byte[] ParseHexString(string s)
		{
			static bool TryParseDigit(char c, out byte digit)
			{
				if (c >= '0' && c <= 'f')
				{
					if (c <= '9')
					{
						digit = (byte)(c - '0');
					}
					else if (c >= 'A')
					{
						if (c >= 'a')
						{
							digit = (byte)(c - ('a' - 10));
						}
						else if (c <= 'F')
						{
							digit = (byte)(c - ('A' - 10));
						}
						else
						{
							goto Failed;
						}
					}
					else
					{
						goto Failed;
					}

					return true;
				}

			Failed:;
				digit = 0;
				return false;
			}

			byte[] data = new byte[s.Length / 2];

			for (int i = 0; i < data.Length; i++)
			{
				int j = 2 * i;
				if (!TryParseDigit(s[j], out byte a) || !TryParseDigit(s[j + 1], out byte b))
				{
					throw new ArgumentException();
				}
				data[i] = (byte)(a << 4 | b);
			}

			return data;
		}
	}
}
